generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["kni"]
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  GUEST

  @@schema("kni")
}

enum UserType {
  FREE
  PREMIUM

  @@schema("kni")
}

enum TestDifficulty {
  EASY
  MEDIUM
  HARD

  @@schema("kni")
}

enum TestStatus {
  DRAFT
  ACTIVE
  ARCHIVED

  @@schema("kni")
}

model user {
  id                    String                  @id @default(cuid())
  email                 String                  @unique
  password              String
  name                  String?
  role                  Role                    @default(STUDENT)
  user_type             UserType                @default(FREE)
  premium_code          String?                 @unique // Redeemed premium code
  premium_activated_at  DateTime?
  last_weekly_test_at   DateTime? // For free users weekly limit
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  sessions              session[]
  test_templates        test_templates[]
  test_results          test_results[]
  user_progress         user_progress[]
  daily_recommendations daily_recommendations[]
  premium_codes         premium_codes[]         @relation("RedeemedBy")
  mock_test_attempts    mock_test_attempts[]
  weekly_assignments    weekly_assignments[]

  @@map("users")
  @@schema("kni")
}

model session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("kni")
}

// KNI Test System Tables
model test_questions {
  id                  String                @id @default(cuid())
  question            String
  options             Json // Array of answer options
  correct_answer      String
  subject_area        String
  difficulty          TestDifficulty        @default(MEDIUM)
  explanation         String?
  difficulty_score    Int                   @default(65) // Dynamic score 1-130
  category            String?
  tags                String[]
  times_answered      Int                   @default(0)
  times_correct       Int                   @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  test_results        test_results[]
  mock_test_questions mock_test_questions[]
  question_analytics  question_analytics[]

  @@map("test_questions")
  @@schema("kni")
}

model test_templates {
  id              String         @id @default(cuid())
  name            String
  description     String?
  subject_area    String
  duration        Int // Duration in minutes
  total_questions Int
  passing_score   Int            @default(70)
  instructions    String?
  is_active       Boolean        @default(true)
  createdBy       String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  creator         user           @relation(fields: [createdBy], references: [id])
  test_results    test_results[]

  @@map("test_templates")
  @@schema("kni")
}

model test_results {
  id           String         @id @default(cuid())
  userId       String
  templateId   String
  questionId   String
  user_answer  String
  is_correct   Boolean
  time_taken   Int? // Time taken in seconds
  score        Int?
  total_score  Int?
  percentage   Float?
  status       String         @default("completed") // completed, in_progress, abandoned
  started_at   DateTime
  completed_at DateTime?
  createdAt    DateTime       @default(now())
  user         user           @relation(fields: [userId], references: [id], onDelete: Cascade)
  template     test_templates @relation(fields: [templateId], references: [id], onDelete: Cascade)
  question     test_questions @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("test_results")
  @@schema("kni")
}

// Premium Code System
model premium_codes {
  id         String    @id @default(cuid())
  code       String    @unique
  is_used    Boolean   @default(false)
  used_by    String?
  used_at    DateTime?
  expires_at DateTime?
  created_by String // Admin who created the code
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       user?     @relation("RedeemedBy", fields: [used_by], references: [id])

  @@map("premium_codes")
  @@schema("kni")
}

// Mock Tests (Generated by n8n)
model mock_tests {
  id                  String                @id @default(cuid())
  title               String
  description         String?
  subject_area        String
  difficulty          TestDifficulty        @default(MEDIUM)
  duration            Int // Duration in minutes
  total_questions     Int
  passing_score       Int                   @default(70)
  instructions        String?
  status              TestStatus            @default(ACTIVE)
  target_user_type    UserType? // FREE, PREMIUM, or null for both
  created_by_n8n      Boolean               @default(true)
  n8n_workflow_id     String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  mock_test_questions mock_test_questions[]
  mock_test_attempts  mock_test_attempts[]
  weekly_assignments  weekly_assignments[]

  @@map("mock_tests")
  @@schema("kni")
}

// Junction table for mock tests and questions
model mock_test_questions {
  id           String         @id @default(cuid())
  mock_test_id String
  question_id  String
  order_index  Int // Order of question in test
  mock_test    mock_tests     @relation(fields: [mock_test_id], references: [id], onDelete: Cascade)
  question     test_questions @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@unique([mock_test_id, question_id])
  @@map("mock_test_questions")
  @@schema("kni")
}

// Mock Test Attempts
model mock_test_attempts {
  id              String             @id @default(cuid())
  user_id         String
  mock_test_id    String
  status          String             @default("in_progress") // in_progress, completed, abandoned
  score           Int?
  total_questions Int
  correct_answers Int                @default(0)
  percentage      Float?
  time_taken      Int? // Time taken in seconds
  started_at      DateTime           @default(now())
  completed_at    DateTime?
  answers         Json // Store user answers
  user            user               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  mock_test       mock_tests         @relation(fields: [mock_test_id], references: [id], onDelete: Cascade)
  evaluations     test_evaluations[]

  @@map("mock_test_attempts")
  @@schema("kni")
}

// Test Evaluations (Generated by n8n)
model test_evaluations {
  id                  String             @id @default(cuid())
  attempt_id          String
  overall_score       Int
  detailed_feedback   Json // Question-by-question feedback
  improvement_areas   String[]
  strengths           String[]
  recommended_study   String[]
  difficulty_analysis Json // Analysis of question difficulties
  performance_trends  Json // User's performance patterns
  generated_by_n8n    Boolean            @default(true)
  n8n_workflow_id     String?
  createdAt           DateTime           @default(now())
  attempt             mock_test_attempts @relation(fields: [attempt_id], references: [id], onDelete: Cascade)

  @@map("test_evaluations")
  @@schema("kni")
}

// Question Analytics (for collective scoring)
model question_analytics {
  id                       String         @id @default(cuid())
  question_id              String
  total_attempts           Int            @default(0)
  correct_attempts         Int            @default(0)
  success_rate             Float          @default(0)
  current_difficulty_score Int            @default(65) // 1-130 scale
  last_updated             DateTime       @default(now())
  question                 test_questions @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@unique([question_id])
  @@map("question_analytics")
  @@schema("kni")
}

// User Progress Tracking
model user_progress {
  id                String    @id @default(cuid())
  user_id           String
  subject_area      String
  total_tests_taken Int       @default(0)
  total_questions   Int       @default(0)
  correct_answers   Int       @default(0)
  average_score     Float     @default(0)
  weak_areas        String[]
  strong_areas      String[]
  improvement_rate  Float     @default(0)
  last_test_date    DateTime?
  streak_days       Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, subject_area])
  @@map("user_progress")
  @@schema("kni")
}

// Daily Recommendations (Premium users)
model daily_recommendations {
  id                  String   @id @default(cuid())
  user_id             String
  recommendation_type String // study_area, practice_questions, review_topics
  content             Json // Recommendation details
  priority            Int      @default(1) // 1-5 priority level
  is_completed        Boolean  @default(false)
  generated_by_n8n    Boolean  @default(true)
  n8n_workflow_id     String?
  expires_at          DateTime
  createdAt           DateTime @default(now())
  user                user     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("daily_recommendations")
  @@schema("kni")
}

// Weekly Test Assignments (Free users)
model weekly_assignments {
  id           String     @id @default(cuid())
  user_id      String
  mock_test_id String
  assigned_at  DateTime   @default(now())
  expires_at   DateTime
  is_completed Boolean    @default(false)
  completed_at DateTime?
  user         user       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  mock_test    mock_tests @relation(fields: [mock_test_id], references: [id], onDelete: Cascade)

  @@map("weekly_assignments")
  @@schema("kni")
}

// n8n Webhook Logs
model n8n_webhook_logs {
  id            String    @id @default(cuid())
  webhook_type  String // test_submitted, user_registered, code_redeemed
  payload       Json
  response      Json?
  status        String // success, error, pending
  error_message String?
  processed_at  DateTime?
  createdAt     DateTime  @default(now())

  @@map("n8n_webhook_logs")
  @@schema("kni")
}
