version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kni-platform-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - DIRECT_URL=${DIRECT_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - REDIS_URL=${REDIS_URL}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - EMAIL_FROM=${EMAIL_FROM}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME}
      - UPLOAD_PROVIDER=${UPLOAD_PROVIDER:-minio}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-http://localhost:9000}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=${MINIO_BUCKET:-kni-uploads}
      - MINIO_USE_SSL=${MINIO_USE_SSL:-false}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_S3_REGION=${AWS_S3_REGION}
      - AWS_S3_ACCESS_KEY_ID=${AWS_S3_ACCESS_KEY_ID}
      - AWS_S3_SECRET_ACCESS_KEY=${AWS_S3_SECRET_ACCESS_KEY}
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - kni-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: kni-platform-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kni_db}
      POSTGRES_USER: ${POSTGRES_USER:-kni_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - kni-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kni_user} -d ${POSTGRES_DB:-kni_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: kni-platform-redis
    restart: unless-stopped
    command: sh -c 'redis-server --appendonly yes --requirepass "$${REDIS_PASSWORD}"'
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kni-network
    healthcheck:
      test: ["CMD", "sh", "-c", 'redis-cli --no-auth-warning -a "$${REDIS_PASSWORD}" ping']
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Database backup service
  db-backup:
    image: postgres:15-alpine
    container_name: kni-platform-backup
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER:-kni_user}
      POSTGRES_DB: ${POSTGRES_DB:-kni_db}
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data:ro
    networks:
      - kni-network
    command: >
      sh -c '
        echo "Starting backup service with user: $$POSTGRES_USER, database: $$POSTGRES_DB"
        # Validate environment variables
        if [ -z "$$POSTGRES_USER" ] || [ -z "$$POSTGRES_DB" ] || [ -z "$$PGPASSWORD" ]; then
          echo "ERROR: Missing required environment variables"
          echo "POSTGRES_USER: $$POSTGRES_USER"
          echo "POSTGRES_DB: $$POSTGRES_DB"
          echo "PGPASSWORD: [set: $$([ -n "$$PGPASSWORD" ] && echo "yes" || echo "no")]"
          exit 1
        fi
        # Wait for PostgreSQL to be ready
        until pg_isready -h postgres -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 5
        done
        echo "PostgreSQL is ready, starting backup loop"
        while true; do
          echo "Creating backup at $$(date)"
          pg_dump -h postgres -U "$$POSTGRES_USER" -d "$$POSTGRES_DB" > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          if [ $$? -eq 0 ]; then
            echo "Backup completed successfully"
          else
            echo "Backup failed with exit code $$?"
          fi
          find /backups -name "backup_*.sql" -mtime +7 -delete
          sleep 86400
        done
      '
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  logs:
    driver: local

networks:
  kni-network:
    driver: bridge
